/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.punchcafe.vngine.gb.codegen;

import dev.punchcafe.vngine.gb.codegen.narrative.NarrativeReader;
import dev.punchcafe.vngine.gb.codegen.render.ComponentRenderer;
import dev.punchcafe.vngine.pom.NarrativeAdaptor;
import dev.punchcafe.vngine.pom.PomLoader;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.stream.Stream;

import static java.util.stream.Collectors.toList;

public class App {

    public static void main(String[] args) {}

    public void run(final File vngProjectRoot, final String scriptDestination) throws IOException {
        final var narrativeReader = new NarrativeReader();
        final var gameConfig = PomLoader.forGame(vngProjectRoot, narrativeReader).loadGameConfiguration();
        final var rendererFactory = new RendererFactory(gameConfig);


        final var allComponents = Stream.<ComponentRenderer>builder()
                .add(rendererFactory.utilsRender())
                .add(rendererFactory.gameStateRenderer())
                .add(rendererFactory.gameStateMutationRenderer())
                .add(rendererFactory.predicatesRenderer())
                .add(rendererFactory.setupMethodRenderer())
                .add(rendererFactory.mainMethodRender())
                .add(rendererFactory.nodeMutationsRenderer())
                .add(rendererFactory.playerBasedTransitionDefinitionRenderer())
                .add(rendererFactory.predicateBasedTransitionDefinitionRenderer())
                .add(rendererFactory.transitionDeclarationRenderer())
                .add(rendererFactory.narrativeDefinitionRenderer())
                .add(rendererFactory.nodeDefinitionRenderer())
                .add(rendererFactory.narrativeRenderer())
                .add(rendererFactory.nodeRenderer())
                .add(rendererFactory.noMutationArray())
                .build()
                .collect(toList());

        final var scriptRenderer = ScriptRenderer.builder()
                .componentRenderers(allComponents)
                .build();

        final var renderedScript = scriptRenderer.render();
        final var out = new BufferedWriter(new FileWriter(scriptDestination));
        out.write(renderedScript);
        out.close();
    }
}
